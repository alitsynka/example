{"version":3,"file":"static/js/270.9c3f30cd.chunk.js","mappings":"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","sources":["pages/conclusion/Сonclusion.module.scss","pages/conclusion/ConclusionRow.tsx","pages/conclusion/Сonclusion.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Wrapper\":\"Сonclusion_Wrapper__bzlED\",\"TableContainer\":\"Сonclusion_TableContainer__QRw6F\",\"TableWr\":\"Сonclusion_TableWr__m782g\",\"Table\":\"Сonclusion_Table__Vru4R\",\"TableHead\":\"Сonclusion_TableHead__eoxma\",\"TableRow\":\"Сonclusion_TableRow__gb3Vm\",\"TableCell\":\"Сonclusion_TableCell__ciyyS\",\"TableBody\":\"Сonclusion_TableBody__7XWRD\",\"InputNumber\":\"Сonclusion_InputNumber__BgGAT\",\"TextField\":\"Сonclusion_TextField__xXVt+\",\"BtnsWr\":\"Сonclusion_BtnsWr__t7Oo-\",\"ApplyBtn\":\"Сonclusion_ApplyBtn__-dIbF\"};","import {TableCell, TableRow, TextField} from \"@mui/material\";\nimport style from \"./Сonclusion.module.scss\";\nimport {useState} from \"react\";\n\ntype WalletRowPropsType = {\n    network: string,\n    adress: string,\n    minValue: number\n    gaz: number\n    id: number\n}\n\nexport const ConclusionRow = (props: WalletRowPropsType) => {\n\n    const [adress, setAdress] = useState(props.adress);\n    const [minValue, setMinValue] = useState(props.minValue);\n    const [gaz, setGaz] = useState(props.gaz);\n\n    return (\n        <TableRow className={style.TableRow}>\n            <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                {props.network}\n            </TableCell>\n            <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                {/*<TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\"  className={style.TextField}/>*/}\n                <TextField id=\"standard-basic\" variant=\"standard\"\n                           value={adress}\n                           onChange={(e) => setAdress(e.currentTarget.value)}\n                />\n            </TableCell>\n            <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                <input id=\"standard-basic\"\n                       value={minValue}\n                       type={'number'}\n                       className={style.InputNumber}\n                       onChange={(e) => setMinValue(e.target.valueAsNumber)}\n\n                />\n            </TableCell>\n            <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                <input id=\"standard-basic\"\n                       value={gaz}\n                       type={'number'}\n                       className={style.InputNumber}\n                       onChange={(e) => setGaz(e.target.valueAsNumber)}\n                />\n            </TableCell>\n            <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                Sat\n            </TableCell>\n        </TableRow>\n    )\n}","import style from './Сonclusion.module.scss';\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@mui/material\";\nimport {ConclusionRow} from \"./ConclusionRow\";\nimport {useState} from \"react\";\n\n\nexport default function Сonlusion() {\n    const [conslusionState, setConslusionState] = useState([\n        {\n            network: 'ETH',\n            adress: 'bc1asdasd34',\n            minValue: 78,\n            gaz: 45,\n            id: 1,\n        }, {\n            network: 'BTC',\n            adress: 'bc1asdasd34',\n            minValue: 78,\n            gaz: 45,\n            id: 2,\n        }, {\n            network: 'BNB',\n            adress: 'bc1asdasd34',\n            minValue: 78,\n            gaz: 45,\n            id: 3,\n        },\n    ])\n\n    function applyChanges() {\n\n    }\n\n    return (\n        <div className={style.Wrapper}>\n            <TableContainer className={style.TableContainer}>\n                <div className={style.TableWr}>\n                    <Table className={style.Table}>\n                        <TableHead className={style.TableHead}>\n                            <TableRow className={style.TableRow}>\n                                <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                                    Сеть:\n                                </TableCell>\n                                <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                                    Адрес для вывода:\n                                </TableCell>\n                                <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                                    Мин. количество\n                                </TableCell>\n                                <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n                                    Газ\n                                </TableCell>\n                                <TableCell className={`${style.TableCell} ${style.MessageCell}`}>\n\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody className={style.TableBody}>\n                            {conslusionState.map((tr, index) => {\n                                return (\n                                    <ConclusionRow network={tr.network}\n                                                   adress={tr.network}\n                                                   minValue={tr.minValue}\n                                                   key={index}\n                                                   gaz={tr.gaz} id={tr.id}/>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </div>\n            </TableContainer>\n            <div className={style.BtnsWr}>\n                <button className={style.ApplyBtn} onClick={applyChanges}>Сохранить</button>\n            </div>\n        </div>\n    )\n}"],"names":["ConclusionRow","props","adress","setAdress","useState","minValue","setMinValue","gaz","setGaz","_jsxs","TableRow","className","style","children","_jsx","TableCell","concat","MessageCell","network","TextField","id","variant","value","onChange","e","currentTarget","type","InputNumber","target","valueAsNumber","Сonlusion","conslusionState","setConslusionState","Wrapper","TableContainer","TableWr","Table","TableHead","TableBody","map","tr","index","BtnsWr","ApplyBtn","onClick"],"sourceRoot":""}